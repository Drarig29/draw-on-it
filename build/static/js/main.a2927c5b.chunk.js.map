{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["App","props","undo","canvas","current","clear","save","alert","state","imgSrc","canvasWidth","canvasHeight","createRef","img","Image","src","URL","document","location","href","searchParams","get","onload","width","window","innerWidth","height","setState","this","drawImage","className","Button","onClick","ref","brushColor","brushRadius","lazyRadius","hideInterface","hideGrid","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAqDeA,E,kDA9CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,KAAO,WACH,EAAKC,OAAOC,QAAQF,QArBL,EAwBnBG,MAAQ,WACJ,EAAKF,OAAOC,QAAQC,SAzBL,EA4BnBC,KAAO,WACHC,MAAM,oCA3BN,EAAKC,MAAQ,CAAEC,OAAQ,GAAIC,YAAa,QAASC,aAAc,SAC/D,EAAKR,OAASS,sBAHC,E,gEAME,IAAD,OACZC,EAAM,IAAIC,MACdD,EAAIE,IAAM,IAAIC,IAAIC,SAASC,SAASC,MAAMC,aAAaC,IAAI,SAC3DR,EAAIS,OAAS,WACT,IAAIC,EAA4B,GAApBC,OAAOC,WACfC,EAAUb,EAAIa,OAASb,EAAIU,MAASA,EACxC,EAAKI,SAAS,CAAElB,OAAQI,EAAIE,IAAKL,YAAY,GAAD,OAAKa,EAAL,MAAgBZ,aAAa,GAAD,OAAKe,EAAL,W,2CAK5EE,KAAKzB,OAAOC,QAAQyB,c,+BAgBpB,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAQC,QAASJ,KAAK1B,MAAtB,WACA,kBAAC6B,EAAA,EAAD,CAAQC,QAASJ,KAAKvB,OAAtB,WACA,kBAAC0B,EAAA,EAAD,CAAQC,QAASJ,KAAKtB,MAAtB,eACA,kBAAC,IAAD,CAAYwB,UAAU,SAASG,IAAKL,KAAKzB,OAAQ+B,WAAW,MAAMC,YAAa,EAAGC,WAAY,EAAGC,eAAe,EAC5G5B,OAAQmB,KAAKpB,MAAMC,OAAQC,YAAakB,KAAKpB,MAAME,YAAaC,aAAciB,KAAKpB,MAAMG,aACzF2B,UAAU,S,GA1CZC,IAAMC,WCOJC,QACW,cAA7BjB,OAAON,SAASwB,UAEe,UAA7BlB,OAAON,SAASwB,UAEhBlB,OAAON,SAASwB,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2927c5b.chunk.js","sourcesContent":["import React, { createRef } from 'react';\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport './App.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { imgSrc: \"\", canvasWidth: \"400px\", canvasHeight: \"400px\" };\r\n        this.canvas = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let img = new Image();\r\n        img.src = new URL(document.location.href).searchParams.get('image');\r\n        img.onload = () => {\r\n            let width = window.innerWidth * .6;\r\n            let height = (img.height / img.width) * width;\r\n            this.setState({ imgSrc: img.src, canvasWidth: `${width}px`, canvasHeight: `${height}px` });\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.canvas.current.drawImage();\r\n    }\r\n\r\n    undo = () => {\r\n        this.canvas.current.undo();\r\n    }\r\n\r\n    clear = () => {\r\n        this.canvas.current.clear();\r\n    }\r\n\r\n    save = () => {\r\n        alert(\"Prenez une capture d'Ã©cran !\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Button onClick={this.undo}>Annuler</Button>\r\n                <Button onClick={this.clear}>Effacer</Button>\r\n                <Button onClick={this.save}>Sauvegarder</Button>\r\n                <CanvasDraw className=\"canvas\" ref={this.canvas} brushColor=\"red\" brushRadius={2} lazyRadius={0} hideInterface={false}\r\n                    imgSrc={this.state.imgSrc} canvasWidth={this.state.canvasWidth} canvasHeight={this.state.canvasHeight}\r\n                    hideGrid={true} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}